import unittest
from unittest.mock import patch, MagicMock
import gomoku_server


class MockHandler(gomoku_server.GameServer):
    def __init__(self):
        pass


class TestGameServer(unittest.TestCase):
    def setUp(self):
        self.server = MockHandler()
        self.server.server_url = "http://localhost:8443"

    def test_check_winner_first_move(self):
        board_first_move = [
            ["●", "~", "~", "~", "~", "~", "~", "~", "~", "~",
                "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"]
        ]
        response = self.server.check_winner(board_first_move, 0, 0)
        self.assertFalse(response)

    def test_check_winner_winner(self):
        board_winner = [
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
                "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "○", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "○", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "○", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "○", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "●", "●",
             "●", "●", "●", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~",
             "~", "~", "~", "~", "~", "~", "~", "~", "~"]
        ]
        response = self.server.check_winner(board_winner, 10, 11)
        assert response == True

    def test_check_winner_draw(self):
        board_draw = [
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
                "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
             "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
             "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
             "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●",
             "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●",
             "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●",
             "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●",
             "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
             "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
             "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
             "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
             "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●",
             "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●",
             "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●",
             "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●",
             "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
             "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
             "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○",
             "●", "○", "●", "○", "●", "○", "●", "○", "●"],
        ]

        response = self.server.check_winner(board_draw, 10, 10)
        assert response == "draw"

    @patch('gomoku_server.DATA_GAME')
    def test_login_player1(self, mock_DATA_GAME):
        mock_DATA_GAME.return_value = {"testuser": "unknown"}
        data = {"username": "testuser", "password": "testpass"}
        self.server.send_json_response = MagicMock()
        self.server.login_player(data)
        self.server.send_json_response.assert_called_once_with(
            {"success": False, "message": "Invalid username or password."}
        )

    def test_register_player1(self):
        data = {"username": "testuser", "password": "123"}
        self.server.send_json_response = MagicMock()
        self.server.register_player(data)
        self.server.send_json_response.assert_called_once_with({
            "success": False,
            "message": (
                "Username and password must be at least 4 characters long."
            ),
        })

    def test_register_player2(self):
        data = {"username": "Ivi", "password": "goodpassword"}
        self.server.send_json_response = MagicMock()
        self.server.register_player(data)
        self.server.send_json_response.assert_called_once_with({
            "success": False,
            "message": (
                "Username and password must be at least 4 characters long."
            ),
        })

    def test_create_game1(self):
        TEST_GAME_ID = 7
        with patch.object(gomoku_server, 'DATA_GAME', {"total_id_game": TEST_GAME_ID}):
            self.server.send_json_response = MagicMock()
            self.server.create_game("unused")
            self.server.send_json_response.assert_called_once_with(
                {"success": True, "game_id": TEST_GAME_ID + 1}
            )


if __name__ == '__main__':
    unittest.main()
