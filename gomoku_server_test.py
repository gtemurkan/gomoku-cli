import pytest
from gomoku_server import GameServer


        
def test_check_winner_first_move():
    board_first_move = [
            ["●", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
        ]
    """Тест на обычный ход пользователем."""
    response = GameServer.check_winner("",board_first_move,0,0)
    assert response == False
    
def test_check_winner_winner():
    board_winner = [
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "○", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "○", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "○", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "○", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "●", "●", "●", "●", "●", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
            ["~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~", "~"],
        ]
    """Тест на регистрацию нового пользователя."""
    response = GameServer.check_winner("",board_winner,10,11)
    assert response == True

def test_check_winner_draw():
    board_draw = [
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
            ["●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●", "○", "●"],
        ]
    """Тест на случай, когда все поле занято."""
    response = GameServer.check_winner("",board_draw,10,10)
    assert response == "draw"

        
if __name__ == "__main__":
    unittest.main()
